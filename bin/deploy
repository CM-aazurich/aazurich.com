#!/usr/bin/env bash

set -e

path_before="$(pwd)"
project_path="$(dirname "$0")/.."

function on_exit {
  cd "$path_before"
}

trap on_exit EXIT
cd "$project_path"

if test ! -e .env; then
  echo "You need to provide settings in .env file '$(pwd)/.env'..."
  exit 5
fi

echo "Importing $(pwd)/.env..."
env_data="$(sed '/^#/d' .env | grep =)"
while IFS= read -r line
do
  declare "$line"
done <<< "$env_data"

function show_help {
  cat <<EOD
Usage: deploy PROD
EOD
}

function deploy {
  cd /app

  echo "Copying files..."
  LFTP_PASSWORD="$(read_var PASSWORD)" lftp -u "$(read_var USER)" "$(read_var HOST)" --env-password <<EOD
  CD "./$(read_var DIR)"
  mirror -R ./wp-content/themes/zenzero ./wp-content/themes/zenzero
  mirror -R ./wp-content/themes/zenzero-aa ./wp-content/themes/zenzero-aa
  mirror -R ./wp-content/plugins/aa-berlin-addons ./wp-content/plugins/aa-berlin-addons
EOD

  echo "Done."
}

function read_var {
  local var_name="DEPLOY_$1_${deploy_target}"
  echo "${!var_name}"
}

deploy_target="$1"
is_inside=""
if test "$2" == "--do-deployment=aye"; then
  is_inside="1"
fi

if test -z "$is_inside"; then
  if ! command -v docker-compose > /dev/null; then
    echo "docker-compose has not been installed."
    exit 4
  fi
fi

case "$deploy_target" in
PROD)
  if test -n "$is_inside"; then
    deploy
  else
    docker-compose exec -u application app-1 bin/deploy "$deploy_target" --do-deployment=aye
  fi
  ;;
*)
  show_help
  exit 3
  ;;
esac
